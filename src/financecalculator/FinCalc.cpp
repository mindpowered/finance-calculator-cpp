// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_financecalculator_FinCalc
#include <financecalculator/FinCalc.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_219058e487ec1951_5_new,"financecalculator.FinCalc","new",0xad24c300,"financecalculator.FinCalc.new","financecalculator/FinCalc.hx",5,0x6f4707b1)
HX_LOCAL_STACK_FRAME(_hx_pos_219058e487ec1951_7_futureValue,"financecalculator.FinCalc","futureValue",0xa88e16ce,"financecalculator.FinCalc.futureValue","financecalculator/FinCalc.hx",7,0x6f4707b1)
namespace financecalculator{

void FinCalc_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_219058e487ec1951_5_new)
            	}

Dynamic FinCalc_obj::__CreateEmpty() { return new FinCalc_obj; }

void *FinCalc_obj::_hx_vtable = 0;

Dynamic FinCalc_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FinCalc_obj > _hx_result = new FinCalc_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FinCalc_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x223c9d28;
}

 ::Dynamic FinCalc_obj::futureValue(Float presentValue,int numPeriods,Float interestRate,int timesCompoundedPerPeriod,Float depositAmount,bool depositAtBeginning){
            	HX_STACKFRAME(&_hx_pos_219058e487ec1951_7_futureValue)
HXLINE(   8)		Float ir = (interestRate / ((Float)100.0));
HXLINE(   9)		Float fvps = (presentValue * ::Math_obj::pow((1 + ir),( (Float)(numPeriods) )));
HXLINE(  10)		Float fv = (depositAmount / ir);
HXLINE(  11)		fv = (fv * (::Math_obj::pow((1 + ir),( (Float)(numPeriods) )) - ((Float)1.0)));
HXLINE(  12)		if (depositAtBeginning) {
HXLINE(  13)			fv = (fv * (((Float)1.0) + ir));
            		}
HXLINE(  15)		Float totalDeposits = ((( (Float)(numPeriods) ) * depositAmount) + presentValue);
HXLINE(  16)		Float futureValue = (fv + fvps);
HXLINE(  17)		Float totalInterest = (futureValue - totalDeposits);
HXLINE(  18)		futureValue = (::Math_obj::fround((futureValue * ((Float)100.0))) / ((Float)100.0));
HXLINE(  19)		totalInterest = (::Math_obj::fround((totalInterest * ((Float)100.0))) / ((Float)100.0));
HXLINE(  20)		totalDeposits = (::Math_obj::fround((totalDeposits * ((Float)100.0))) / ((Float)100.0));
HXLINE(  21)		return  ::Dynamic(::hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("futureValue",2e,84,99,9f),futureValue)
            			->setFixed(1,HX_("totalDeposits",39,4b,36,f3),totalDeposits)
            			->setFixed(2,HX_("totalInterest",8e,16,33,5e),totalInterest));
            	}


HX_DEFINE_DYNAMIC_FUNC6(FinCalc_obj,futureValue,return )


::hx::ObjectPtr< FinCalc_obj > FinCalc_obj::__new() {
	::hx::ObjectPtr< FinCalc_obj > __this = new FinCalc_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< FinCalc_obj > FinCalc_obj::__alloc(::hx::Ctx *_hx_ctx) {
	FinCalc_obj *__this = (FinCalc_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FinCalc_obj), false, "financecalculator.FinCalc"));
	*(void **)__this = FinCalc_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FinCalc_obj::FinCalc_obj()
{
}

::hx::Val FinCalc_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"futureValue") ) { return ::hx::Val( futureValue_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *FinCalc_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *FinCalc_obj_sStaticStorageInfo = 0;
#endif

static ::String FinCalc_obj_sMemberFields[] = {
	HX_("futureValue",2e,84,99,9f),
	::String(null()) };

::hx::Class FinCalc_obj::__mClass;

void FinCalc_obj::__register()
{
	FinCalc_obj _hx_dummy;
	FinCalc_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("financecalculator.FinCalc",0e,83,4f,ad);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FinCalc_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FinCalc_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FinCalc_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FinCalc_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace financecalculator
