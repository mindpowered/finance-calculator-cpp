// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_16d41c6fc5b8bf5d
#define INCLUDED_16d41c6fc5b8bf5d
#include "maglev/MagLev.h"
#endif
#ifndef INCLUDED_869a921fcf5bba54
#define INCLUDED_869a921fcf5bba54
#include "maglev/MagLevAny.h"
#endif
#ifndef INCLUDED_20db69a30a45e926
#define INCLUDED_20db69a30a45e926
#include "maglev/MagLevArray.h"
#endif
#ifndef INCLUDED_35ec03520fbb0747
#define INCLUDED_35ec03520fbb0747
#include "maglev/MagLevBoolean.h"
#endif
#ifndef INCLUDED_d8a74f90a5c0b964
#define INCLUDED_d8a74f90a5c0b964
#include "maglev/MagLevError.h"
#endif
#ifndef INCLUDED_7f9204b932c8d809
#define INCLUDED_7f9204b932c8d809
#include "maglev/MagLevFunction.h"
#endif
#ifndef INCLUDED_95fa5e9194badcf5
#define INCLUDED_95fa5e9194badcf5
#include "maglev/MagLevNumber.h"
#endif
#ifndef INCLUDED_f4da16f85a617f60
#define INCLUDED_f4da16f85a617f60
#include "maglev/MagLevObject.h"
#endif
#ifndef INCLUDED_65acb6100057af6e
#define INCLUDED_65acb6100057af6e
#include "maglev/MagLevResult.h"
#endif
#ifndef INCLUDED_c859d2752ef86c43
#define INCLUDED_c859d2752ef86c43
#include "maglev/MagLevString.h"
#endif
#ifndef INCLUDED_financecalculator_FinCalc
#include <financecalculator/FinCalc.h>
#endif
#ifndef INCLUDED_financecalculator_FinanceCalculator
#include <financecalculator/FinanceCalculator.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4133322d3d7c5687_12_new,"financecalculator.FinanceCalculator","new",0x1540003c,"financecalculator.FinanceCalculator.new","financecalculator/FinanceCalculator.hx",12,0xfbcf4135)
HX_LOCAL_STACK_FRAME(_hx_pos_4133322d3d7c5687_21_registerMyMethods,"financecalculator.FinanceCalculator","registerMyMethods",0x4d886a5f,"financecalculator.FinanceCalculator.registerMyMethods","financecalculator/FinanceCalculator.hx",21,0xfbcf4135)
HX_LOCAL_STACK_FRAME(_hx_pos_4133322d3d7c5687_32_registerMyMethods,"financecalculator.FinanceCalculator","registerMyMethods",0x4d886a5f,"financecalculator.FinanceCalculator.registerMyMethods","financecalculator/FinanceCalculator.hx",32,0xfbcf4135)
HX_LOCAL_STACK_FRAME(_hx_pos_4133322d3d7c5687_43_registerMyMethods,"financecalculator.FinanceCalculator","registerMyMethods",0x4d886a5f,"financecalculator.FinanceCalculator.registerMyMethods","financecalculator/FinanceCalculator.hx",43,0xfbcf4135)
HX_LOCAL_STACK_FRAME(_hx_pos_4133322d3d7c5687_58_registerMyMethods,"financecalculator.FinanceCalculator","registerMyMethods",0x4d886a5f,"financecalculator.FinanceCalculator.registerMyMethods","financecalculator/FinanceCalculator.hx",58,0xfbcf4135)
HX_LOCAL_STACK_FRAME(_hx_pos_4133322d3d7c5687_18_registerMyMethods,"financecalculator.FinanceCalculator","registerMyMethods",0x4d886a5f,"financecalculator.FinanceCalculator.registerMyMethods","financecalculator/FinanceCalculator.hx",18,0xfbcf4135)
namespace financecalculator{

void FinanceCalculator_obj::__construct( ::maglev::MagLev maglev){
            	HX_GC_STACKFRAME(&_hx_pos_4133322d3d7c5687_12_new)
HXLINE(  13)		this->maglev = maglev;
HXLINE(  14)		this->calc =  ::financecalculator::FinCalc_obj::__alloc( HX_CTX );
HXLINE(  15)		this->registerMyMethods();
            	}

Dynamic FinanceCalculator_obj::__CreateEmpty() { return new FinanceCalculator_obj; }

void *FinanceCalculator_obj::_hx_vtable = 0;

Dynamic FinanceCalculator_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FinanceCalculator_obj > _hx_result = new FinanceCalculator_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool FinanceCalculator_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5b8a7d80;
}

void FinanceCalculator_obj::registerMyMethods(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_4133322d3d7c5687_21_registerMyMethods)
HXLINE(  22)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  23)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  24)			data->push(::maglev::MagLevString_obj::fromString(HX_("FinanceCalculator.PresentValueOfFutureMoney",5e,41,2d,d9)));
HXLINE(  25)			data->push(::maglev::MagLevString_obj::fromString(HX_("financecalculator",9c,95,07,9d)));
HXLINE(  26)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  27)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'FinanceCalculator.PresentValueOfFutureMoney' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",37,00,00,41),data);
HXLINE(  28)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  29)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_4133322d3d7c5687_32_registerMyMethods)
HXLINE(  33)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  34)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  35)			data->push(::maglev::MagLevString_obj::fromString(HX_("FinanceCalculator.PresentValueOfDeposits",54,7e,ff,df)));
HXLINE(  36)			data->push(::maglev::MagLevString_obj::fromString(HX_("financecalculator",9c,95,07,9d)));
HXLINE(  37)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  38)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'FinanceCalculator.PresentValueOfDeposits' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",f9,3a,7c,32),data);
HXLINE(  39)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  40)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::financecalculator::FinanceCalculator,_gthis) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_4133322d3d7c5687_43_registerMyMethods)
HXLINE(  44)			Float presentValue = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(0))->getFloat();
HXLINE(  45)			int numPeriods = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(1))->getInt();
HXLINE(  46)			Float interestRate = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(2))->getFloat();
HXLINE(  47)			int timesCompoundedPerPeriod = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(3))->getInt();
HXLINE(  48)			Float depositAmount = ::hx::TCast<  ::maglev::MagLevNumber >::cast(args->get(4))->getFloat();
HXLINE(  49)			bool depositAtBeginning = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(args->get(5))->getBool();
HXLINE(  50)			 ::Dynamic ret = _gthis->calc->futureValue(presentValue,numPeriods,interestRate,timesCompoundedPerPeriod,depositAmount,depositAtBeginning);
HXLINE(  51)			 ::maglev::MagLevObject resobj = ::maglev::MagLevObject_obj::create();
HXLINE(  52)			resobj->set(HX_("futureValue",2e,84,99,9f),::maglev::MagLevNumber_obj::fromFloat(( (Float)(ret->__Field(HX_("futureValue",2e,84,99,9f),::hx::paccDynamic)) )));
HXLINE(  53)			resobj->set(HX_("totalInterest",8e,16,33,5e),::maglev::MagLevNumber_obj::fromFloat(( (Float)(ret->__Field(HX_("totalInterest",8e,16,33,5e),::hx::paccDynamic)) )));
HXLINE(  54)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromResult(resobj);
HXLINE(  55)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::maglev::MagLev,bus) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_4133322d3d7c5687_58_registerMyMethods)
HXLINE(  59)			 ::maglev::MagLevArray data = ::maglev::MagLevArray_obj::create();
HXLINE(  60)			data->push(::maglev::MagLevString_obj::fromString(HX_("_not_implemented_",a8,29,87,20)));
HXLINE(  61)			data->push(::maglev::MagLevString_obj::fromString(HX_("FinanceCalculator.NetPresentValue",81,77,de,5e)));
HXLINE(  62)			data->push(::maglev::MagLevString_obj::fromString(HX_("financecalculator",9c,95,07,9d)));
HXLINE(  63)			bus->call(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),data);
HXLINE(  64)			 ::maglev::MagLevError err = ::maglev::MagLevError_obj::create(-20000,HX_("You are trying to use the 'FinanceCalculator.NetPresentValue' method but it's not quite done yet. Please email support@mindpowered.dev to find out when it will be done.",5a,e6,03,29),data);
HXLINE(  65)			 ::maglev::MagLevResult result = ::maglev::MagLevResult_obj::fromError(err);
HXLINE(  66)			return result;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_4133322d3d7c5687_18_registerMyMethods)
HXDLIN(  18)		 ::financecalculator::FinanceCalculator _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  19)		 ::maglev::MagLev bus = this->maglev;
HXLINE(  21)		 ::maglev::MagLev _hx_tmp = this->maglev;
HXDLIN(  21)		_hx_tmp->_hx_register(HX_("FinanceCalculator.PresentValueOfFutureMoney",5e,41,2d,d9),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_0(bus))));
HXLINE(  32)		 ::maglev::MagLev _hx_tmp1 = this->maglev;
HXDLIN(  32)		_hx_tmp1->_hx_register(HX_("FinanceCalculator.PresentValueOfDeposits",54,7e,ff,df),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_1(bus))));
HXLINE(  43)		 ::maglev::MagLev _hx_tmp2 = this->maglev;
HXDLIN(  43)		_hx_tmp2->_hx_register(HX_("FinanceCalculator.FutureValue",3c,22,5e,db),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_2(_gthis))));
HXLINE(  58)		 ::maglev::MagLev _hx_tmp3 = this->maglev;
HXDLIN(  58)		_hx_tmp3->_hx_register(HX_("FinanceCalculator.NetPresentValue",81,77,de,5e),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_3(bus))));
            	}


HX_DEFINE_DYNAMIC_FUNC0(FinanceCalculator_obj,registerMyMethods,(void))


::hx::ObjectPtr< FinanceCalculator_obj > FinanceCalculator_obj::__new( ::maglev::MagLev maglev) {
	::hx::ObjectPtr< FinanceCalculator_obj > __this = new FinanceCalculator_obj();
	__this->__construct(maglev);
	return __this;
}

::hx::ObjectPtr< FinanceCalculator_obj > FinanceCalculator_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev maglev) {
	FinanceCalculator_obj *__this = (FinanceCalculator_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FinanceCalculator_obj), true, "financecalculator.FinanceCalculator"));
	*(void **)__this = FinanceCalculator_obj::_hx_vtable;
	__this->__construct(maglev);
	return __this;
}

FinanceCalculator_obj::FinanceCalculator_obj()
{
}

void FinanceCalculator_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FinanceCalculator);
	HX_MARK_MEMBER_NAME(maglev,"maglev");
	HX_MARK_MEMBER_NAME(calc,"calc");
	HX_MARK_END_CLASS();
}

void FinanceCalculator_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maglev,"maglev");
	HX_VISIT_MEMBER_NAME(calc,"calc");
}

::hx::Val FinanceCalculator_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"calc") ) { return ::hx::Val( calc ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { return ::hx::Val( maglev ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"registerMyMethods") ) { return ::hx::Val( registerMyMethods_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FinanceCalculator_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"calc") ) { calc=inValue.Cast<  ::financecalculator::FinCalc >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { maglev=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FinanceCalculator_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maglev",2a,df,2b,b3));
	outFields->push(HX_("calc",95,18,ba,41));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FinanceCalculator_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /*  ::maglev::MagLev */ ,(int)offsetof(FinanceCalculator_obj,maglev),HX_("maglev",2a,df,2b,b3)},
	{::hx::fsObject /*  ::financecalculator::FinCalc */ ,(int)offsetof(FinanceCalculator_obj,calc),HX_("calc",95,18,ba,41)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FinanceCalculator_obj_sStaticStorageInfo = 0;
#endif

static ::String FinanceCalculator_obj_sMemberFields[] = {
	HX_("maglev",2a,df,2b,b3),
	HX_("calc",95,18,ba,41),
	HX_("registerMyMethods",83,b1,0a,b9),
	::String(null()) };

::hx::Class FinanceCalculator_obj::__mClass;

void FinanceCalculator_obj::__register()
{
	FinanceCalculator_obj _hx_dummy;
	FinanceCalculator_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("financecalculator.FinanceCalculator",4a,72,bc,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FinanceCalculator_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FinanceCalculator_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FinanceCalculator_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FinanceCalculator_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace financecalculator
